"""
Django settings for sportbase project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
from pathlib import Path


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-fu!v$_6y!8zj9ykxp3l=y4hw14&xf*jf)9wwsr!a=t-q8=r#jh'

# Paystack settings
PAYSTACK_SECRET_KEY = 'sk_test_0d7f8930343dac6e7b26c4e033c38826ed8252e4'


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['www.sportpropa.com','sportpropa.com', 'localhost', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    
    'django.contrib.humanize',
    'rest_framework',

    'myapp',
    'user_management',
    'fanbanter',
    'competition_management',
    'match_management',
    'standing_management',
    'voting',
    'admin_panel',
    

]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'myapp.middleware.PerformanceLoggingMiddleware',  # Add your middleware here

    
]

ROOT_URLCONF = 'sportbase.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [ BASE_DIR / 'templates' ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'myapp.context_processors.add_variable_to_context',
            ],
        },
    },
]

WSGI_APPLICATION = 'sportbase.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'sportpropadb',
#         'USER': 'sportpropadbuser',
#         'PASSWORD': 'mvemjsuT9p@',
#         'HOST': 'localhost',
#         'PORT': '5432',
#     }
# }

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_ROOT = BASE_DIR / 'static'
STATIC_URL = '/static/'

STATICFILES_DIRS = [
    BASE_DIR / "myapp/static",
]

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'


DATA_UPLOAD_MAX_MEMORY_SIZE = 10485760  # 10 MB
FILE_UPLOAD_MAX_MEMORY_SIZE = 10485760  # 10 MB


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field


DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# STORAGES = {
#     # ...
#     "staticfiles": {
#         "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
#     },
# }


SITE_ID = 1



AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',  # needed for admin login
    'allauth.account.auth_backends.AuthenticationBackend',
)


import ssl



# Path to the copied certificates on the VPS
# SSL_CERT_FILE = '/etc/letsencrypt/live/sportpropa.com/fullchain.pem'
# SSL_KEY_FILE = '/etc/letsencrypt/live/sportpropa.com/privkey.pem'

# Ensure SSL certificates are used -  for VPS
# if os.path.exists(SSL_CERT_FILE):
#     ssl_context = ssl.create_default_context(cafile=SSL_CERT_FILE)
#     ssl_context.load_cert_chain(certfile=SSL_CERT_FILE, keyfile=SSL_KEY_FILE)

# Path to the copied certificates
SSL_CERT_FILE = 'C:\\Users\\FOSAT-TECH\\Desktop\\myweb\\fullchain1.pem'
SSL_KEY_FILE = 'C:\\Users\\FOSAT-TECH\\Desktop\\myweb\\privkey1.pem'

# Ensure SSL certificates are used
if os.path.exists(SSL_CERT_FILE):
    ssl_context = ssl.create_default_context(cafile=SSL_CERT_FILE)
    ssl_context.load_cert_chain(certfile=SSL_CERT_FILE, keyfile=SSL_KEY_FILE)


# Email settings
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
MY_DOMAIN = 'info@sportpropa.com'


EMAIL_HOST = 'mail.sportpropa.com'  # Your VPS mail server
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
EMAIL_PORT = 465
EMAIL_USE_SSL = True  
EMAIL_HOST_USER = 'info@sportpropa.com'
EMAIL_HOST_PASSWORD = 'mvemjsuT9p@'
DEFAULT_FROM_EMAIL = MY_DOMAIN
EMAIL_TIMEOUT = 20  # Timeout in seconds

# Disable SSL certificate verification (for testing)
# EMAIL_SSL_CERTFILE = None
# EMAIL_SSL_KEYFILE = None


# Django-Allauth settings
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_AUTHENTICATION_METHOD = 'email'


# Define log file path
# LOGGING_DIR = os.path.join(BASE_DIR, 'logs')
# os.makedirs(LOGGING_DIR, exist_ok=True)


# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'file': {
#             'level': 'DEBUG',
#             'class': 'logging.FileHandler',
#             'filename': os.path.join(LOGGING_DIR, 'django.log'),
#         },
#         'console': {
#             'level': 'DEBUG',
#             'class': 'logging.StreamHandler',
#         },
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['file', 'console'],
#             'level': 'DEBUG',
#             'propagate': True,
#         },
#         'django.core.mail': {
#             'handlers': ['file', 'console'],
#             'level': 'DEBUG',
#             'propagate': True,
#         },
#     },
# }
